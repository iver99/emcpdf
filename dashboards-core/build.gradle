import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

apply from:'test.gradle'

dfversion = project.ext.getServiceVersion('DashboardService-API')
def versionPathElement = dfversion + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

publishing.publications {
    integTest(MavenPublication) {
                        setArtifactId(project.name + '-' + integTestJar.appendix)
                        setGroupId("${publishGroup}")
                        artifact integTestJar.archivePath
    }
    thisJarPublication(MavenPublication) {
                        from project.components.java
                        setGroupId("${publishGroup}")
    }
}

sourceSets {	
	main {	
		java {	
			srcDir 'src/main/java'	
		}	
		resources {	
			srcDirs = ['src/main/java', 'src/resources/java']
		}	
	}
 }

artifactoryPublish {
	 publications('integTest')
	 publications('thisJarPublication')
}

test {
	useTestNG()		
	{
		//We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
		//if you wish to run ALL tests within this projet - remove following.
		includeGroups 's1' ,'s2'
	}
}

dependencies {
	compile project(':dashboards-entities') { transitive = false }
	testRuntime getProjectArtifact('ojdbc6') { transitive = false }
	compile getProjectArtifact('log4j-core')  { transitive = false }
	compile getProjectArtifact('log4j-api')  { transitive = false }
	compile getProjectArtifact('log4j-slf4j-impl')  { transitive = false }
    compile getProjectArtifact('commons-lang3') { transitive = false }
	compile getProjectArtifact('javax.persistence')  { transitive = false }
	compile getProjectArtifact('eclipselink')   { transitive = false }
	compile getProjectArtifact('javax.transaction-api')  { transitive = false }
	compile getProjectArtifact('jettison')  { transitive = false }
	compile getProjectArtifact('jackson-core-asl')  { transitive = false }
	compile getProjectArtifact('jackson-mapper-asl')  { transitive = false }
	compile getProjectArtifact('jackson-xc')  { transitive = false }
	compile	getProjectArtifact('registry-client')
    compile getProjectArtifact('registry-lookup-client') 
	compile getProjectArtifact('emaas-platform-tenant-sdk')  { transitive = false }
	compile getProjectArtifact('coherence') {transitive=false}
	compile getProjectArtifact('jersey-core') {transitive=false}
	compile getProjectArtifact('jersey-client') {transitive=false}
	compile getProjectArtifact('jmockit') { transitive = false }
	compile getProjectArtifact('em-qatool-os-webdriver') {transitive=false}

	

}

processResources {
    from('src/main/resources') {
        include '*.properties', '*.xml'
        filter(ReplaceTokens, tokens: [version : versionPathElement])
    }
}








