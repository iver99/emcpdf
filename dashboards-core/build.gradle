import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

apply from:'test.gradle'

dfversion = project.ext.getServiceVersion('DashboardService-API')
def versionPathElement = dfversion + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

publishing.publications {
    integTest(MavenPublication) {
                        setArtifactId(project.name + '-' + integTestJar.appendix)
                        setGroupId("${publishGroup}")
                        artifact integTestJar.archivePath
    }
    thisJarPublication(MavenPublication) {
                        from project.components.java
                        setGroupId("${publishGroup}")
    }
}

sourceSets {	
	main {	
		java {	
			srcDir 'src/main/java'	
		}	
		resources {	
			srcDirs = ['src/main/java', 'src/resources/java']
		}	
	}
 }

artifactoryPublish {
	 publications('integTest')
	 publications('thisJarPublication')
}

test {
	useTestNG()		
	{
		//We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
		//if you wish to run ALL tests within this projet - remove following.
		includeGroups 's1' ,'s2'
	}
}

dependencies {
	compile project(':dashboards-entities') { transitive = false }
	testRuntime(group: 'com.oracle.jdbc', name: 'ojdbc6', version: '12.1.0.1.0') { transitive = false }
	compile(group: 'org.apache.logging.log4j', name:'log4j-core', version:'2.0.1')  { transitive = false }
	compile(group: 'org.apache.logging.log4j', name:'log4j-api', version:'2.0.1')  { transitive = false }
	compile(group: 'org.apache.logging.log4j', name:'log4j-slf4j-impl', version:'2.0.1')  { transitive = false }
    compile(group: 'org.apache.commons', name:'commons-lang3', version:'3.1') { transitive = false }
	compile(group: 'org.eclipse.persistence', name: 'javax.persistence', version: '2.0.5')  { transitive = false }
	compile(group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.4.2')   { transitive = false }
	compile(group: 'javax.transaction', name: 'javax.transaction-api', version: '1.2')  { transitive = false }
	compile(group: 'org.codehaus.jettison', name: 'jettison', version: '1.3.4')  { transitive = false }
	compile(group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.12')  { transitive = false }
	compile(group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.12')  { transitive = false }
	compile(group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.2')  { transitive = false }
	compile(group: 'com.oracle.emaas.emcpsm', name: 'registry-client', version: '1.+')
    compile(group: 'com.oracle.emaas.emcpsm', name: 'registry-lookup-client', version: '1.+') 
	compile(group: 'com.oracle.emaas', name:'emaas-platform-tenant-sdk', version:'0.2')  { transitive = false }
	compile(group: 'com.oracle.coherence', name: 'coherence', version: '12.1.3.0.0-130331.2230') {transitive=false}
	compile(group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1') {transitive=false}
	compile(group: 'com.sun.jersey', name: 'jersey-client', version: '1.17.1') {transitive=false}
	compile(group: 'org.jmockit', name: 'jmockit', version: '1.19') { transitive = false }
	compile(group: 'com.oracle.emaas.emdi', name: 'em-qatool-os-webdriver', version: '1.0.7') {transitive=false}
	compile(group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1') {transitive=false}
	compile(group: 'com.sun.jersey', name: 'jersey-client', version: '1.17.1') {transitive=false}
	

}

processResources {
    from('src/main/resources') {
        include '*.properties', '*.xml'
        filter(ReplaceTokens, tokens: [version : versionPathElement])
    }
}








