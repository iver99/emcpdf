import java.nio.file.*
import java.security.MessageDigest
import java.util.regex.Pattern
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

//apply plugin: 'groovy'
apply plugin: 'war'
apply from: 'test.gradle'

def versionPathElement = version + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

// source 'webapp' directory
def File sourceWebappDir = new File(project.projectDir, 'public_html')
// source directories where jet files are copied
def File sourceJetDestDir = new File(sourceWebappDir, 'libs/@version@/js/oraclejet')
// sourc directories where font files are copied
def File sourceFontDestDir = new File(sourceWebappDir, 'libs/@version@/css/font-awesome')

def stagingDir = buildDir.absolutePath+'/staging/public_html'
def compiledDir = buildDir.absolutePath+'/public_html'
def webRootSourceDir = 'public_html'

sourceCompatibility = 1.7
targetCompatibility = 1.7


//define the JS source locations

task cleanJs(type:Delete) {
	delete fileTree(dir: stagingDir)
        delete fileTree(dir: compiledDir)
}

task prepareRequireJsConfig(type:Copy) {
    from ('.') {    
	include "dashboard.build.js"
	        //replace @version@ with versionPathElement
	        filter(ReplaceTokens, tokens: [version: versionPathElement, staging_dir:'../'+stagingDir+'/', compiled_dir:'../'+compiledDir+'/'])
    }
    into buildDir
}

task copyJsSource(type:Copy, dependsOn:[cleanJs]) {
    from ('public_html') {
	include "**/*"
    }
    //logger.lifecycle("versionPathElement:" + versionPathElement)
    //from (webRootSourceDir) {
    //    include "**/*"
    //        eachFile {
    //            fileCopyDetails ->
    //            fileCopyDetails.path = fileCopyDetails.path.replaceAll(/(.*\/|.*)@version@\/(.*)/, '$1/'+versionPathElement+'/$2')
    //            fileCopyDetails.name = fileCopyDetails.name.replaceAll(/(.*)@version@(.*)/, '$1'+versionPathElement+'$2')
    //        }
            //replace @version@ with versionPathElement
    //        filesMatching("**/*.js") {
               // logger.lifecycle("filter: "+filter(ReplaceTokens, tokens: ['@version@': versionPathElement]).toString())
		//filter(ReplaceTokens, tokens: ['knockout': versionPathElement])
     //       }
     //       filesMatching("**/*.html") {
                //filter(ReplaceTokens, tokens: [version: versionPathElement])
     //       }
    //}
    into stagingDir

    doLast {
       //this is here because of gradle bug, the old @version@ directory remains
        //delete stagingDir+'/@version@'
	//delete stagingDir+'/libs/@version@'
    }
}

task stageJs(dependsOn: copyJsSource){
}

javascript.source {
	dev {
            js {
                srcDir 'public_html/emcsDependencies/uifwk'
                include "**/*.js"
		exclude "**/*.orig.js"
            }
        }
}

javascript.source.dev.js.files.eachWithIndex { File jsFile, idx ->
    tasks.add(name: "dominify${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "${jsFile.name}"
	String renamedFile = fileName.replace(".",".orig.")
	def parentDir = jsFile.parent
	def tmpFolder= parentDir.split("uifwk")
	def sourceFile = stagingDir+"/emcsDependencies/uifwk"+tmpFolder[1]+"/"+fileName
	def destFile = stagingDir+"/emcsDependencies/uifwk"+tmpFolder[1]+"/"+renamedFile
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
	sourceMap = file(stagingDir+"/emcsDependencies/uifwk"+tmpFolder[1]+"/"+sourceMapFile)
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
	//	logger.lifecycle("compiledFile:" + compiledFile.absolutePath)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = new File(stagingDir+"/emcsDependencies/uifwk"+tmpFolder[1]+"/"+sourceMapFile)
		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		//logger.lifecycle("absPath:" + Pattern.quote(absPath))
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}	
    }
}

task individualMinify(dependsOn: [copyJsSource, tasks.matching { Task task -> task.name.startsWith("dominify")}]){}

project.task("unpackJETFromArtifactory") << {
    // if the resources/web/js/libs directory is empty - either the first time this task is
    // run or the directory has been cleaned, then
    // iterate over the project artifacts and look for the oraclejet.zip,
    // - downloaded on the local file system (generally found in <user_home_dir>/.gradle)
    // - unzip to the build/jet directory
    // - copy over the directories to different common/resources directories
    // (these directories are specified in the .gitignore file)
    // - delete the build/jet directory
    // build directory where the oraclejet.zip will be unzipped
    
    def File buildJetUnzipDir = new File(buildDir.absolutePath, 'jet')
    //first time or if custom cleans removes it
    sourceJetDestDir.mkdirs()

    //project.configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('oraclejet') && files(sourceJetDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildJetUnzipDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJetUnzipDir.absolutePath
            }
            // Copy each of the unzipped jet directories to
            // the appropriate source directories
            // 1. build/jet/ >> public_html/emcsDependencies/oraclejet/
            project.copy {
                from  buildJetUnzipDir
                into sourceJetDestDir.absolutePath
            }
            
            //finally delete the build/jet directory
            project.delete(buildJetUnzipDir)
        }
    }
}

project.task("cleanJet") << {
    println 'Cleaning up jet directories ...'
    println 'oraclejet dir: ' + sourceJetDestDir.absolutePath
    sourceJetDestDir.deleteDir()
}

project.task("unpackFontFromArtifactory") << {
    
    def File buildFontUnzipDir = new File(buildDir.absolutePath, 'font-awesome')
    //first time or if custom cleans removes it
    sourceFontDestDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('font-awesome') && files(sourceFontDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildFontUnzipDir.mkdirs()
            project.copy {  
		from project.file(artifact.file.absolutePath)
		into buildFontUnzipDir.absolutePath
	    }
	    
	    ant.unzip(src: buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0.zip", dest:buildFontUnzipDir.absolutePath)
		    
	    project.copy {
	    	    from buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0"
		    into sourceFontDestDir.absolutePath
	    }
		    
	    project.delete(buildFontUnzipDir)
        }
    }
}

project.task("cleanFont") << {
    println 'Cleaning up font directories ...'
    println 'font-awesome dir: ' + sourceFontDestDir.absolutePath
    sourceFontDestDir.deleteDir()
}

clean.dependsOn cleanJet,cleanFont

war.archiveName "omc-ui-framework-web.war"

copyJsSource.dependsOn unpackJETFromArtifactory, unpackFontFromArtifactory

war.dependsOn individualMinify

war {
	from(stagingDir) {
	       include '**/*'
	        into('/')
	}

	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}

	rootSpec.exclude("**/*.zip")
}

//task buildDFCommonLibZip(type: Zip){
//	baseName = 'emcs-ui-framework'
//	appendix = 'common'
//	from stagingDir+'/emcsDependencies/uifwk/'
//	into 'uifwk'
//}



dependencies {
        compile(group: 'com.oracle.oraclejet', name: 'oraclejet', version: '1.1.2-19410', ext: 'war'){ transitive = false }	
	compile(group: 'com.font-awesome', name: 'font-awesome', version: '4.3.0', ext: 'zip') {transitive = false }
	
}
check.dependsOn integTestJar

publishing.publications {
    integTest(MavenPublication) {
                        setArtifactId(project.name + '-' + integTestJar.appendix)
                        setGroupId('com.oracle.emaas.emcpdf.test')
                        artifact integTestJar.archivePath
    }

}



artifactoryPublish {
publications ('integTest')

    }


