import java.nio.file.*
import java.security.MessageDigest
import java.util.regex.Pattern
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

apply plugin: 'eclipse-wtp'
apply plugin: 'war'
apply plugin: 'compass'
apply from: 'test.gradle'

jsversion = project.ext.getServiceVersion('OMC-UI-Framework')
def versionPathElement = jsversion + "-"+ rootProject.ext.get("appTimeStamp")

// source 'webapp' directory
def File sourceWebappDir = new File(project.projectDir, 'public_html')

// source directories where jet files are copied
def File sourceJetDestDir = new File(sourceWebappDir, 'libs/@version@/js/oraclejet')
def File sourceJsCanvgDestDir = new File(sourceWebappDir, 'libs/@version@/js/canvg')
def File sourceJsCanvasDesDir = new File(sourceWebappDir, 'libs/@version@/js/html2canvas')

// source directories where font files are copied
def File sourceFontDestDir = new File(sourceWebappDir, 'libs/@version@/css/font-awesome')

def stagingDir = buildDir.absolutePath+'/staging/public_html'
def compiledDir = buildDir.absolutePath+'/public_html'
def webRootSourceDir = 'public_html'

//def chefDir = project.rootDir.absolutePath +'/dashboards-chef/cookbook-emcs-omc-ui-framework/recipes'

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations{
	jscover  
	compass
}

def jscc = "1".equals(System.getenv()['ENABLE_CC_JS'])

dependencies {
    compile(group: 'com.oracle.oraclejet', name: 'oraclejet', version: '2.0.2-26417', ext: 'war'){ transitive = false }	
    compile(group: 'files', name: 'canvg', version: '1.3', ext: 'zip'){ transitive = false }
    compile(group: 'releases.download', name: 'html2canvas', version: '0.4.0', ext: 'js'){ transitive = false }
    compile(group: 'org.apache.logging.log4j', name:'log4j-core', version:'2.0.1'){ transitive = false }
    compile(group: 'org.apache.logging.log4j', name:'log4j-api', version:'2.0.1'){ transitive = false }
    compile(group: 'com.font-awesome', name: 'font-awesome', version: '4.3.0', ext: 'zip') {transitive = false }
    providedCompile project(':dashboards-ui-test-common-api')  { transitive = false }
    providedCompile project(':omc-ui-framework:omc-ui-framework-webutils')  { transitive = false }
    compass (group: 'org.jruby', name: 'jruby-complete', version: '1.7.3')
    jscover (group:'com.github.tntim96', name:'JSCover-all', version:'1.0.19')
}

task cleanJs(type:Delete) {
	delete fileTree(dir: stagingDir)
	delete fileTree(dir: compiledDir)	
}

project.task("unpackJETFromArtifactory") << {
    def File buildJetUnzipDir = new File(buildDir.absolutePath, 'jet')
    //first time or if custom cleans removes it
    sourceJetDestDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('oraclejet') && files(sourceJetDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildJetUnzipDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJetUnzipDir.absolutePath
            }
		    project.copy {
				from  buildJetUnzipDir
				into sourceJetDestDir.absolutePath
		    }
	        if(!project.hasProperty("devMode")){
				def outputDir = file(stagingDir+"/libs/"+versionPathElement+"/js/oraclejet");
				outputs.dir outputDir
				project.copy {
				    from  buildJetUnzipDir
				    into outputDir
				}
		    }
	    project.delete(buildJetUnzipDir)
    	}
    }
}

//unpack js libs from artifactory
project.task("unpackJSLibFromArtifactory") << {
    def File buildJsCanvgUnzipDir = new File(buildDir.absolutePath, 'canvg')
    def File buildJsCanvasUnzipDir = new File(buildDir.absolutePath, 'html2canvas')
    //first time or if custom cleans removes it
    sourceJsCanvgDestDir.mkdirs()
    sourceJsCanvasDesDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('canvg') && files(sourceJsCanvgDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            sourceJsCanvgDestDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJsCanvgUnzipDir.absolutePath
            }
            project.copy {
                from  buildJsCanvgUnzipDir
                into sourceJsCanvgDestDir.absolutePath
            }
		    if(!project.hasProperty("devMode")){
		        def outputDir = file(stagingDir+"/libs/"+versionPathElement+"/js/canvg");
		        outputs.dir outputDir
		        project.copy {
				    from sourceJsCanvgDestDir.absolutePath
				    into outputDir
		        }
		    }	
            project.delete(buildJsCanvgUnzipDir)
        }

        if (artifact.name.equals('html2canvas') && files(sourceJsCanvasDesDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            sourceJsCanvasDesDir.mkdirs()
            project.copy {
                from artifact.file.absolutePath
                into buildJsCanvasUnzipDir.absolutePath
            }
            project.copy {
                from  buildJsCanvasUnzipDir
                into sourceJsCanvasDesDir.absolutePath
                rename 'html2canvas-(.+)', 'html2canvas.js'
            }
		    if(!project.hasProperty("devMode")){
		        def outputDir = file(stagingDir+"/libs/"+versionPathElement+"/js/html2canvas");
		        outputs.dir outputDir
		        project.copy {
			    from sourceJsCanvasDesDir.absolutePath
			    into outputDir
		        }
		    }	
            project.delete(buildJsCanvasUnzipDir)
        }
    }
}

project.task("cleanJet") << {
    println 'Cleaning up jet directories ...'
    println 'oraclejet dir: ' + sourceJetDestDir.absolutePath
    sourceJetDestDir.deleteDir()
    println 'JS lib canvg dir: ' + sourceJsCanvgDestDir.absolutePath
    sourceJsCanvgDestDir.deleteDir()
    println 'JS lib html2canvas dir : ' + sourceJsCanvasDesDir.absolutePath
    sourceJsCanvasDesDir.deleteDir()

}

project.task("unpackFontFromArtifactory") << {    
    def File buildFontUnzipDir = new File(buildDir.absolutePath, 'font-awesome')
    //first time or if custom cleans removes it
    sourceFontDestDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('font-awesome') && files(sourceFontDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildFontUnzipDir.mkdirs()
            project.copy {  
				from project.file(artifact.file.absolutePath)
				into buildFontUnzipDir.absolutePath
			}	    
		    ant.unzip(src: buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0.zip", dest:buildFontUnzipDir.absolutePath)		    
		    project.copy {
		    	    from buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0"
			    into sourceFontDestDir.absolutePath
		    }
		    if(!project.hasProperty("devMode")){
		        def outputDir = file(stagingDir+"/libs/"+versionPathElement+"/css/font-awesome");
		        outputs.dir outputDir
		        project.copy {
				    from sourceFontDestDir.absolutePath
				    into outputDir
		        }
		    }
		    project.delete(buildFontUnzipDir)
        }
    }
}

project.task("cleanFont") << {
    println 'Cleaning up font directories ...'
    println 'font-awesome dir: ' + sourceFontDestDir.absolutePath
    sourceFontDestDir.deleteDir()
}

clean.dependsOn cleanJet,cleanFont

project.task("cleanCompassCss")<<{
}

task copyJsSource(type:Copy, dependsOn:[cleanJs,compileSass]) {
    from (webRootSourceDir) {
        include "**/*"
        exclude "**/uifwkCommonMsg.js"
            eachFile {
                fileCopyDetails ->
                fileCopyDetails.path = fileCopyDetails.path.replaceAll(/(.*\/|.*)@version@\/(.*)/, '$1/'+versionPathElement+'/$2')
                fileCopyDetails.name = fileCopyDetails.name.replaceAll(/(.*)@version@(.*)/, '$1'+versionPathElement+'$2')
            }
            //replace @version@ with versionPathElement
            filesMatching("**/*.js") {
            	filter(ReplaceTokens, tokens: [version: versionPathElement])
            }
            filesMatching("**/*.html") {
                filter(ReplaceTokens, tokens: [version: versionPathElement])
            }
            filesMatching("**/*.css") {
                filter(ReplaceTokens, tokens: [version: versionPathElement])
            }
    }
    into stagingDir

    from (webRootSourceDir) {
        include "**/uifwkCommonMsg.js"
            eachFile {
                fileCopyDetails ->
                fileCopyDetails.path = fileCopyDetails.path.replaceAll(/(.*\/|.*)@version@\/(.*)/, '$1/'+versionPathElement+'/$2')
                fileCopyDetails.name = fileCopyDetails.name.replaceAll(/(.*)@version@(.*)/, '$1'+versionPathElement+'$2')
            }
    }
    into stagingDir

    doLast {
       //this is here because of gradle bug, the old @version@ directory remains
       delete stagingDir+'/@version@'
       delete stagingDir+'/libs/@version@'
    }
}

task stageJs(dependsOn:[unpackJETFromArtifactory,unpackJSLibFromArtifactory,unpackFontFromArtifactory,copyJsSource]) {
}

//define the JS source locations
javascript.source {
	externaljs {
	    js {
			srcDir stagingDir+"/libs/@version@/js"
			include "**/canvg/*.js"
			include "**/html2canvas/*.js"
			exclude "**/*.orig.js"
	    }
	}
	staticjs {
        js {
        	srcDir 'public_html/js'
        	include "**/*.js"
        	exclude "**/*.orig.js"
        	exclude "**/uifwk-partition.js"
        }
    }
	cachedjs {
	    js {
			srcDir 'public_html/@version@/js'			
			include "**/*.js"
			exclude "**/*.orig.js"
			exclude "**/uifwk-impl-partition.js"
	    }
	}
    jshint {
		js {
			srcDir 'public_html'
	                include "**/*.js"
		}
    }
}

task dominifycanvasjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "html2canvas.js"
	String renamedFile = fileName.replace(".",".orig.")
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	sourceFile = stagingDir+"/libs/"+versionPathElement+"/js/html2canvas/"+fileName
	destFile = stagingDir+"/libs/"+versionPathElement+"/js/html2canvas/"+renamedFile
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
		
        sourceMap = file(stagingDir+"/libs/"+versionPathElement+"/js/html2canvas/"+sourceMapFile)
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
       	        mapFile = new File(stagingDir+"/libs/"+versionPathElement+"/js/html2canvas/"+sourceMapFile)

		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}
}

task dominifycanvgjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "canvg.js"
	String renamedFile = fileName.replace(".",".orig.")
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	sourceFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+fileName
	destFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+renamedFile
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
		
        sourceMap = file(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
       	        mapFile = new File(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)

		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}
}

task dominifyrgbcolorjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "rgbcolor.js"
	String renamedFile = fileName.replace(".",".orig.")
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	sourceFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+fileName
	destFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+renamedFile
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
		
        sourceMap = file(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
       	        mapFile = new File(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)

		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}
}

task dominifystackblurjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "StackBlur.js"
	String renamedFile = fileName.replace(".",".orig.")
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	sourceFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+fileName
	destFile = stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+renamedFile
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
		
        sourceMap = file(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
       	        mapFile = new File(stagingDir+"/libs/"+versionPathElement+"/js/canvg/"+sourceMapFile)

		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}
}

javascript.source.cachedjs.js.files.eachWithIndex { File jsFile, idx ->
    tasks.add(name: "dominifycachejs${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
		String fileName = "${jsFile.name}"
		String renamedFile = fileName.replace(".",".orig.")
		def parentDir = jsFile.parent
		def tmpFolder= parentDir.split("js") as String[]
		def sourceFile = "";
		def destFile = "";
		def tmp ="";
	
		if ( parentDir.endsWith("/js")){
			for(int i=1; i<tmpFolder.length;i++){
			    tmp=tmp+'js'+tmpFolder[i]
			}
			sourceFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+fileName
			destFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+renamedFile
		}
		else
		{
			for(int i=1; i<tmpFolder.length;i++){
			    tmp=tmp+'js'+tmpFolder[i]
			}
			sourceFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/"+fileName
			destFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/"+renamedFile
		}
		
		doFirst{ 
		    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
		}
	
	    source = sourceFile
		dest = sourceFile
		String sourceMapFile = fileName.replace(".js",".map")
		if ( parentDir.endsWith("/js") )
		{
		    sourceMap = file(stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+sourceMapFile)
		}
		else
		{
		    sourceMap = file(stagingDir+"/"+versionPathElement+"/"+tmp+"/"+sourceMapFile)
		}
	
		closure {
		        warningLevel = 'QUIET'
		}
	
		doLast {
			//update the compiled JS to point to the source map
			File compiledFile = new File(sourceFile)
			compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       
	
			//fix file path in source map file
			File mapFile = compiledFile
			if ( parentDir.endsWith("/js") )
			{
				mapFile = new File(stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+sourceMapFile)
			}
			else
			{
				mapFile = new File(stagingDir+"/"+versionPathElement+"/"+tmp+"/"+sourceMapFile)
			}
			
			String contents = mapFile.getText('UTF-8')
			String absPath = compiledFile
			contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
			mapFile.write(contents, 'UTF-8')
	    }
    }
}

task jsCodeCoverage(type:JavaExec, dependsOn:[cleanJs, stageJs]) {    
    main '-jar'
    configurations.jscover.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    	logger.lifecycle("filepath:  "+artifact.name)
        if (artifact.name.equals('JSCover-all')) {
			logger.lifecycle("filepath"+artifact.file.absolutePath)
			args artifact.file.absolutePath, '-fs', '--local-storage', '--no-instrument-reg=.*\\/d3\\/.*', '--no-instrument-reg=.*\\/canvg\\/.*', '--no-instrument-reg=.*\\/html2canvas\\/.*', '--no-instrument-reg=.*\\/oraclejet\\/.*', '--no-instrument-reg=.*\\/ita-tool\\/.*', '--no-instrument-reg=.*\\/ckeditor\\/.*',stagingDir, buildDir.absolutePath+'/staging/public_htmlcc'
        }
	}   
    
    doLast {
        //delete uninstrumented source
        delete stagingDir
        //rename instrumented source to source folder
        file(buildDir.absolutePath+'/staging/public_htmlcc').renameTo(file(stagingDir))
        //now zip up original-src so we can download and generate reports
        ant.zip(destfile: stagingDir+'/original-src.zip',basedir: stagingDir+'/original-src/');
   }
}

jsCodeCoverage.onlyIf{jscc}

compass {
    gemPath = file('build/.jruby/gems')
    gemJars = ['compass-gems:compass-gems:1.0.1']
    gems = []
    
	cssDir file('public_html/@version@/css')
    
    sassDir file ('public_html/scss')
    debugInfo false // Defaults to true, set to false to remove debug info from generated css file
    noLineComments true
    force true
}

compileSass {
     jvmArgs '-Xmx2048M'
}

task jsHint(type:com.eriwen.gradle.js.tasks.JsHintTask){
	source = javascript.source.jshint.js.files
	dest = file(buildDir.absolutePath+'/jshint.out')
	reporter = 'checkstyle'
	jshint.options = [expr: "true", unused: "true", sub: "true"]
	jshint.predef = [define: 1, require:2, requirejs:3, window:4, document:5, setTimeout:6, console:7, d3:8, $: 9, canvg:10, html2canvas:11, clearTimeout: 12, Promise: 13, setInterval: 14, importScripts:15, Worker: 16, postMessage: 17, btoa: 18, escape: 19, unescape: 20, atob: 21, Storage: 22]
}

//Combine start
/**
 * combine -> minify -> fingerprint JavaScript
 */
task copyStagedJs(type:Copy, dependsOn:[stageJs]) {
    from (stagingDir) {
	include "**/*"	
    }
    into compiledDir
}

task prepareRequireJsConfig(type:Copy) {
    if(!project.hasProperty("devMode")){
        from ('.') {
            include "uifwk.build.js"
                //replace @version@ with versionPathElement
                filter(ReplaceTokens, tokens: [version: versionPathElement])
        }
        into buildDir
    }
    else {
        from ('.') {
            include "uifwk.build.js"
        }
        into buildDir
    }
}

task individualMinify(dependsOn: [copyStagedJs, jsCodeCoverage, tasks.matching { Task task -> task.name.startsWith("dominify")}]){}

task combineAppJs(dependsOn: [individualMinify,prepareRequireJsConfig], type: com.eriwen.gradle.js.tasks.RequireJsTask) {
    source = javascript.source.staticjs.js.files   //point to your source files
    requirejs.buildprofile = file(buildDir.absolutePath+"/uifwk.build.js")
    outputs.upToDateWhen { false }           //requireJs task does not know how to accurately determine if it is UP-TO-DATE so this line says the task is never up to date.
}

task minifyUIFwkPartitionJs(dependsOn: [combineAppJs],type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
    doFirst {
        //copy the original source which will be used in a source map
        Files.copy(Paths.get(compiledDir+"/js/uifwk-partition.js"), Paths.get(compiledDir+"/js/uifwk-partition.orig.js"))
    }
    source = file(compiledDir+"/js/uifwk-partition.js")
    dest = file(compiledDir+"/js/uifwk-partition.js")
    sourceMap = file(compiledDir+"/js/uifwk-partition.map")

    closure {
        warningLevel = 'QUIET'
    }

    doLast {
        //update the compiled JS to point to the source map
        File compiledFile = new File(compiledDir+"/js/uifwk-partition.js")
        logger.lifecycle("compiledFile:" + compiledFile.absolutePath)
        compiledFile.append("\n//# sourceMappingURL=uifwk-partition.map", 'UTF-8')

        //fix file path in source map file
        File mapFile = new File(compiledDir+"/js/uifwk-partition.map")
        String contents = mapFile.getText("UTF-8")
        String absPath = compiledFile;
        contents = contents.replaceAll(Pattern.quote(absPath), "uifwk-partition.orig.js")
        mapFile.write(contents, "UTF-8")
        
        //Inject contents of uifwk-load.js into uifwk-partition.js 
        File uifwkLoadJsFile = new File(compiledDir+'/'+versionPathElement+'/js/uifwk-load.js')
        String uifwkLoadJsContents = uifwkLoadJsFile.getText('UTF-8')
        File uifwkPartitionJsFile = new File(compiledDir + '/js/uifwk-partition.js') 
        String uifwkPartitionJsContents = uifwkPartitionJsFile.getText('UTF-8')
        File uifwkPartitionJsFile0 = new File(compiledDir + '/js/uifwk-partition0.js') 
        uifwkPartitionJsFile0.write(uifwkPartitionJsContents, 'UTF-8')  
        uifwkPartitionJsContents =  uifwkLoadJsContents + uifwkPartitionJsContents
        uifwkPartitionJsFile.write(uifwkPartitionJsContents, 'UTF-8')
    }
}

task minifyUIFwkImplPartitionJs(dependsOn: [minifyUIFwkPartitionJs],type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
    doFirst {
        //copy the original source which will be used in a source map
        Files.copy(Paths.get(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.js"), Paths.get(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.orig.js"))
    }
    source = file(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.js")
    dest = file(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.js")
    sourceMap = file(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.map")

    closure {
        warningLevel = 'QUIET'
    }

    doLast {
        //update the compiled JS to point to the source map
        File compiledFile = new File(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.js")
        logger.lifecycle("compiledFile:" + compiledFile.absolutePath)
        compiledFile.append("\n//# sourceMappingURL=uifwk-impl-partition.map", 'UTF-8')

        //fix file path in source map file
        File mapFile = new File(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.map")
        String contents = mapFile.getText("UTF-8")
        String absPath = compiledFile;
        contents = contents.replaceAll(Pattern.quote(absPath), "uifwk-impl-partition.orig.js")
        mapFile.write(contents, "UTF-8")

        ////include uifwk-partition0 in uifwk-impl-partition
        //text = new File(compiledDir+"/js/uifwk-partition0.js").getText()
        //compiledFile.append("\n"+text,'UTF-8')

	//create cached.js file
	Files.copy(Paths.get(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition.js"), Paths.get(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition-cached.js"))
	//Files.copy(Paths.get(compiledDir+"/js/uifwk-partition0.js"), Paths.get(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition-cached.js"))

	text = new File(compiledDir+"/js/uifwk-partition0.js").getText()
	File cachedFile = new File(compiledDir+"/"+versionPathElement+"/js/uifwk-impl-partition-cached.js")
	cachedFile.append("\n"+text,'UTF-8')
    }
}
//Combine end

war.archiveName "omc-ui-framework-web.war"

//copy files without minify when -PdevMode enabled
task copyDevJs(type:Copy, dependsOn: [cleanJs, unpackJETFromArtifactory, unpackJSLibFromArtifactory, unpackFontFromArtifactory,compileSass,jsCodeCoverage]){
    from(webRootSourceDir) {
	include "**/*"
    }
    into stagingDir
    
    doLast {
        delete 'public_html/@version@/css'
	
	//add setting to testMain.js
	File testMainFile = new File(stagingDir+'/@version@/js/testMain.js')
	File newFile1 = new File(stagingDir+'/@version@/js/testMain-output.js')
	newFile1.withPrintWriter { out ->
	    def linenumber = 1
	    testMainFile.eachLine { line ->
		if (linenumber == 1){		    
		    out.println("\nwindow.gradleDevMode=true; \n")
		    out.print(line)
		} else {
		    out.println(line)
		}
		linenumber += 1
	    }
	}
	
	//add setting to datetimePickerMain.js
	File datetimePickerMainFile = new File(stagingDir+'/@version@/js/datetimePickerMain.js')
	File newFile2 = new File(stagingDir+'/@version@/js/datetimePickerMain-output.js')
	newFile2.withPrintWriter { out ->
	    def linenumber = 1
	    datetimePickerMainFile.eachLine { line ->
		if (linenumber == 3){
		    out.print(line)
		    out.println("\nwindow.gradleDevMode=true; \n")
		} else {
		    out.println(line)
		}
		linenumber += 1
	    }
	}

        //add setting to testHamburgerMenuMain.js
	File testHamburgerMenuMainFile = new File(stagingDir+'/@version@/js/testHamburgerMenuMain.js')
	File newFile3 = new File(stagingDir+'/@version@/js/testHamburgerMenuMain-output.js')
	newFile3.withPrintWriter { out ->
	    def linenumber = 1
	    testHamburgerMenuMainFile.eachLine { line ->
		if (linenumber == 1){		    
		    out.println("\nwindow.gradleDevMode=true; \n")
		    out.print(line)
		} else {
		    out.println(line)
		}
		linenumber += 1
	    }
	}

	testMainFile.renameTo(stagingDir+'/@version@/js/testMain_bak.js')
	newFile1.renameTo(stagingDir+'/@version@/js/testMain.js')
	
	datetimePickerMainFile.renameTo(stagingDir+'/@version@/js/datetimePickerMain_bak.js')
	newFile2.renameTo(stagingDir+'/@version@/js/datetimePickerMain.js')

        testHamburgerMenuMainFile.renameTo(stagingDir+'/@version@/js/testHamburgerMenuMain_bak.js')
	newFile3.renameTo(stagingDir+'/@version@/js/testHamburgerMenuMain.js')

	String originalCode = "bundles: (window.DEV_MODE !==null && typeof window.DEV_MODE ===\"object\")"
	String replacedCode = "bundles: ((window.DEV_MODE !==null && typeof window.DEV_MODE ===\"object\") || (window.gradleDevMode !==null && typeof window.gradleDevMode===\"boolean\"))"

 	File mapFile = new File(stagingDir+'/@version@/js/testMain.js')
        String contents = mapFile.getText('UTF-8')        
        contents = contents.replaceAll(Pattern.quote(originalCode), replacedCode)
        mapFile.write(contents, 'UTF-8')

	mapFile = new File(stagingDir+'/@version@/js/datetimePickerMain.js')
        contents = mapFile.getText('UTF-8')        
        contents = contents.replaceAll(Pattern.quote(originalCode), replacedCode)
        mapFile.write(contents, 'UTF-8')

        mapFile = new File(stagingDir+'/@version@/js/testHamburgerMenuMain.js')
        contents = mapFile.getText('UTF-8')        
        contents = contents.replaceAll(Pattern.quote(originalCode), replacedCode)
        mapFile.write(contents, 'UTF-8')

	delete stagingDir+'/@version@/js/testMain-output.js'
	delete stagingDir+'/@version@/js/testMain_bak.js'
	delete stagingDir+'/@version@/js/datetimePickerMain-output.js'
	delete stagingDir+'/@version@/js/datetimePickerMain_bak.js'
    }  
}

task copyStagedDevJs(type:Copy, dependsOn:[copyDevJs]) {
    from (stagingDir) {
	include "**/*"	
    }
    into compiledDir
}

task combineAppJsDebug(dependsOn: [copyStagedDevJs, prepareRequireJsConfig], type: com.eriwen.gradle.js.tasks.RequireJsTask) {
    source = javascript.source.staticjs.js.files   //point to your source files
    requirejs.buildprofile = file(buildDir.absolutePath+"/uifwk.build.js")
    outputs.upToDateWhen { false }           //requireJs task does not know how to accurately determine if it is UP-TO-DATE so this line says the task is never up to date.
}

test {
        classpath = sourceSets.test.compileClasspath + sourceSets.test.output
        useTestNG()
        {
                //We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
                //if you wish to run ALL tests within this projet - remove following.
                includeGroups 's1' ,'s2'
        }
}

eclipse {
    classpath {
        plusConfigurations += configurations.testNG
        plusConfigurations += configurations.webdriver //avoid building error in Eclipse
    }
}

if(project.hasProperty("devMode")){
	war.dependsOn combineAppJsDebug   //copyDevJs
}
//else if(project.hasProperty("debugJs")){
//        war.dependsOn combineAppJsDebug
//}
else
{
	war.dependsOn minifyUIFwkImplPartitionJs

}

war {
//    if(project.hasProperty("devMode")){
//	from(stagingDir) {
//	    include '**/*'
//	    exclude '**/*.orig.js','**/*.map'
//	    into('/')
//	}
//
//	from('src/main/java') { 
//		include '**/*.properties'
//		into('WEB-INF/classes') 
//	}
//    }
//    else
//    {
	from(compiledDir) {
	    include '**/*'
	    exclude '**/*.orig.js','**/*.map','**/scss'
	    into('/')
	}

	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}
}

publishing.publications {
    integTest(MavenPublication) {
	setArtifactId(project.name + '-' + integTestJar.appendix)
	setGroupId("${publishGroup}")
        artifact integTestJar.archivePath
    }
	thisJarPublication(MavenPublication) {
		setGroupId("${publishGroup}")
		artifact jar
	}
}

artifactoryPublish {
	publications ('integTest')
	publications('thisJarPublication')
}

