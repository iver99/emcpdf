import java.nio.file.*
import java.security.MessageDigest
import java.util.regex.Pattern
import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date

apply plugin: 'war'
apply plugin: 'compass'
apply from: 'test.gradle'

jsversion = project.ext.getServiceVersion('OMC-UI-Framework')
def versionPathElement = jsversion + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

// source 'webapp' directory
def File sourceWebappDir = new File(project.projectDir, 'public_html')
// source directories where jet files are copied
def File sourceJetDestDir = new File(sourceWebappDir, 'libs/@version@/js/oraclejet')
def File sourceJsCanvgDestDir = new File(sourceWebappDir, 'libs/@version@/js/canvg')
def File sourceJsCanvasDesDir = new File(sourceWebappDir, 'libs/@version@/js/html2canvas')
// source directories where font files are copied
def File sourceFontDestDir = new File(sourceWebappDir, 'libs/@version@/css/font-awesome')

def stagingDir = buildDir.absolutePath+'/staging/public_html'
def compiledDir = buildDir.absolutePath+'/public_html'
def webRootSourceDir = 'public_html'

sourceCompatibility = 1.7
targetCompatibility = 1.7

configurations{
	compass
}

dependencies {
        compile(group: 'com.oracle.oraclejet', name: 'oraclejet', version: '1.1.2-19410', ext: 'war'){ transitive = false }	
        compile(group: 'files', name: 'canvg', version: '1.3', ext: 'zip'){ transitive = false }
        compile(group: 'releases.download', name: 'html2canvas', version: '0.4.0', ext: 'js'){ transitive = false }
	compile(group: 'com.font-awesome', name: 'font-awesome', version: '4.3.0', ext: 'zip') {transitive = false }

	compass (group: 'org.jruby', name: 'jruby-complete', version: '1.7.3')	
}

task cleanJs(type:Delete) {
	delete fileTree(dir: stagingDir)
        delete fileTree(dir: compiledDir)	
}

project.task("cleanCompassCss")<<{
}

task copyJsSource(type:Copy, dependsOn:[cleanJs,compileSass]) {
    from (webRootSourceDir) {
        include "**/*"
            eachFile {
                fileCopyDetails ->
                fileCopyDetails.path = fileCopyDetails.path.replaceAll(/(.*\/|.*)@version@\/(.*)/, '$1/'+versionPathElement+'/$2')
                fileCopyDetails.name = fileCopyDetails.name.replaceAll(/(.*)@version@(.*)/, '$1'+versionPathElement+'$2')
            }
            //replace @version@ with versionPathElement
            filesMatching("**/*.js") {               
		filter(ReplaceTokens, tokens: [version: versionPathElement])
            }
            filesMatching("**/*.html") {
                filter(ReplaceTokens, tokens: [version: versionPathElement])
            }	
	    filesMatching("**/*.css") {
                filter(ReplaceTokens, tokens: [version: versionPathElement])
            }
    }
    into stagingDir

    doLast {
       //this is here because of gradle bug, the old @version@ directory remains
       delete stagingDir+'/@version@'
       delete stagingDir+'/libs/@version@'
       delete webRootSourceDir+'/@version@/css'
    }
}

//define the JS source locations
javascript.source {
	staticjs {
            js {
                srcDir 'public_html/js'
                include "**/*.js"
		exclude "**/*.orig.js"
            }
        }
	cachedjs {
	    js {
		srcDir 'public_html/@version@/js'
		//scrDir stagingDir+"/@version@/js"
		include "**/*.js"
		exclude "**/*.orig.js"
	    }
	}
    jshint {
	js {
		srcDir 'public_html'
                include "**/*.js"
	}
    }
}

javascript.source.staticjs.js.files.eachWithIndex { File jsFile, idx ->
    tasks.add(name: "dominifystaticjs${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "${jsFile.name}"
	String renamedFile = fileName.replace(".",".orig.")
	def parentDir = jsFile.parent
	def tmpFolder= parentDir.split("js")
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	if ( parentDir.endsWith("/js")){
		for(int i=1; i<tmpFolder.length;i++){
		    tmp=tmp+'js'+tmpFolder[i]
		}
		sourceFile = stagingDir+"/"+tmp+"/js/"+fileName
		destFile = stagingDir+"/"+tmp+"/js/"+renamedFile
	}
	else
	{
		for(int i=1; i<tmpFolder.length;i++){
		    tmp=tmp+'js'+tmpFolder[i]
		}
		sourceFile = stagingDir+"/"+tmp+"/"+fileName
		destFile = stagingDir+"/"+tmp+"/"+renamedFile
	}
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
		
	if ( parentDir.endsWith("/js") )
	{
	    sourceMap = file(stagingDir+"/"+tmp+"/js/"+sourceMapFile)
	}
	else
	{
	    sourceMap = file(stagingDir+"/"+tmp+"/"+sourceMapFile)
	}
	
	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
		
		if ( parentDir.endsWith("/js") )
		{
	    	     mapFile = new File(stagingDir+"/"+tmp+"/js/"+sourceMapFile)
		}
		else
		{
	    	    mapFile = new File(stagingDir+"/"+tmp+"/"+sourceMapFile)
		}

		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}	
    }
}

javascript.source.cachedjs.js.files.eachWithIndex { File jsFile, idx ->
    tasks.add(name: "dominifycachejs${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
	String fileName = "${jsFile.name}"
	String renamedFile = fileName.replace(".",".orig.")
	def parentDir = jsFile.parent
	def tmpFolder= parentDir.split("js") as String[]
	def sourceFile = "";
	def destFile = "";
	def tmp ="";

	if ( parentDir.endsWith("/js")){
		for(int i=1; i<tmpFolder.length;i++){
		    tmp=tmp+'js'+tmpFolder[i]
		}
		sourceFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+fileName
		destFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+renamedFile
	}
	else
	{
		for(int i=1; i<tmpFolder.length;i++){
		    tmp=tmp+'js'+tmpFolder[i]
		}
		sourceFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/"+fileName
		destFile = stagingDir+"/"+versionPathElement+"/"+tmp+"/"+renamedFile
	}
	
	doFirst{ 
	    Files.copy(Paths.get(sourceFile),Paths.get(destFile))
	}

        source = sourceFile
	dest = sourceFile
	String sourceMapFile = fileName.replace(".js",".map")
	if ( parentDir.endsWith("/js") )
	{
	    sourceMap = file(stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+sourceMapFile)
	}
	else
	{
	    sourceMap = file(stagingDir+"/"+versionPathElement+"/"+tmp+"/"+sourceMapFile)
	}

	closure {
	        warningLevel = 'QUIET'
	}

	doLast {
		//update the compiled JS to point to the source map
		File compiledFile = new File(sourceFile)
		compiledFile.append("\n//# sourceMappingURL="+sourceMapFile, 'UTF-8')       

		//fix file path in source map file
		File mapFile = compiledFile
		if ( parentDir.endsWith("/js") )
		{
	    	     mapFile = new File(stagingDir+"/"+versionPathElement+"/"+tmp+"/js/"+sourceMapFile)
		}
		else
		{
	    	    mapFile = new File(stagingDir+"/"+versionPathElement+"/"+tmp+"/"+sourceMapFile)
		}
		
		String contents = mapFile.getText('UTF-8')
		String absPath = compiledFile
		contents = contents.replaceAll(Pattern.quote(absPath), renamedFile)
		mapFile.write(contents, 'UTF-8')
    	}	
    }
}

task individualMinify(dependsOn: [copyJsSource, tasks.matching { Task task -> task.name.startsWith("dominify")}]){}

compass {
    // We package the gems into the .jar file (see compass dependencies)
    // so that http proxy issues do not affect us.  To enable this, 
    // we also build our own plugin for use.
    gemPath = file('build/.jruby/gems')
    gemJars = ['com.oracle.emcs.apmcs:compass-gems:1.0.1']
    gems = []
    //if(project.hasProperty("devMode")){
	cssDir file('public_html/@version@/css')
    //}
    //else{
//	cssDir file('public_html/'+versionPathElement+'/css')
  //  }
    sassDir file ('public_html/scss')
    debugInfo false // Defaults to true,
                    // set to false to remove debug info from generated css file
    noLineComments true
    force true
}

compileSass {
     jvmArgs '-Xmx2048M'
}

task jsHint(type:com.eriwen.gradle.js.tasks.JsHintTask){
        source = javascript.source.jshint.js.files
        dest = file(buildDir.absolutePath+'/jshint.out')
        reporter = 'checkstyle'
        jshint.options = [expr: "true", unused: "true", sub: "true"]
        jshint.predef = [define: 1, require:2, requirejs:3, window:4, document:5, setTimeout:6, console:7, d3:8, $: 9, canvg:10, html2canvas:11, clearTimeout: 12, Promise: 13, setInterval: 14, importScripts:15, Worker: 16, postMessage: 17, btoa: 18, escape: 19, unescape: 20, atob: 21, Storage: 22]
}

project.task("unpackJETFromArtifactory") << {
    // if the resources/web/js/libs directory is empty - either the first time this task is
    // run or the directory has been cleaned, then
    // iterate over the project artifacts and look for the oraclejet.zip,
    // - downloaded on the local file system (generally found in <user_home_dir>/.gradle)
    // - unzip to the build/jet directory
    // - copy over the directories to different common/resources directories
    // (these directories are specified in the .gitignore file)
    // - delete the build/jet directory
    // build directory where the oraclejet.zip will be unzipped
    
    def File buildJetUnzipDir = new File(buildDir.absolutePath, 'jet')
    //first time or if custom cleans removes it
    sourceJetDestDir.mkdirs()

    //project.configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('oraclejet') && files(sourceJetDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildJetUnzipDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJetUnzipDir.absolutePath
            }
            // Copy each of the unzipped jet directories to
            // the appropriate source directories
            // 1. build/jet/ >> public_html/emcsDependencies/oraclejet/
            project.copy {
                from  buildJetUnzipDir
                into sourceJetDestDir.absolutePath
            }
            
            //finally delete the build/jet directory
            project.delete(buildJetUnzipDir)
        }
    }
}

//unpack js libs from artifactory
project.task("unpackJSLibFromArtifactory") << {
    def File buildJsCanvgUnzipDir = new File(buildDir.absolutePath, 'canvg')
    def File buildJsCanvasUnzipDir = new File(buildDir.absolutePath, 'html2canvas')
    //first time or if custom cleans removes it
    sourceJsCanvgDestDir.mkdirs()
    sourceJsCanvasDesDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('canvg') && files(sourceJsCanvgDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            sourceJsCanvgDestDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJsCanvgUnzipDir.absolutePath
            }
            project.copy {
                from  buildJsCanvgUnzipDir
                into sourceJsCanvgDestDir.absolutePath
            }
            project.delete(buildJsCanvgUnzipDir)
        }

    if (artifact.name.equals('html2canvas') && files(sourceJsCanvasDesDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            sourceJsCanvasDesDir.mkdirs()
            project.copy {
                from artifact.file.absolutePath
                into buildJsCanvasUnzipDir.absolutePath
            }
            project.copy {
                from  buildJsCanvasUnzipDir
                into sourceJsCanvasDesDir.absolutePath
        rename 'html2canvas-(.+)', 'html2canvas.js'
            }
            project.delete(buildJsCanvasUnzipDir)
        }

    }
}

project.task("cleanJet") << {
    println 'Cleaning up jet directories ...'
    println 'oraclejet dir: ' + sourceJetDestDir.absolutePath
    sourceJetDestDir.deleteDir()
    println 'JS lib canvg dir: ' + sourceJsCanvgDestDir.absolutePath
    sourceJsCanvgDestDir.deleteDir()
    println 'JS lib html2canvas dir : ' + sourceJsCanvasDesDir.absolutePath
    sourceJsCanvasDesDir.deleteDir()

}

project.task("unpackFontFromArtifactory") << {
    
    def File buildFontUnzipDir = new File(buildDir.absolutePath, 'font-awesome')
    //first time or if custom cleans removes it
    sourceFontDestDir.mkdirs()

    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('font-awesome') && files(sourceFontDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildFontUnzipDir.mkdirs()
            project.copy {  
		from project.file(artifact.file.absolutePath)
		into buildFontUnzipDir.absolutePath
	    }
	    
	    ant.unzip(src: buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0.zip", dest:buildFontUnzipDir.absolutePath)
		    
	    project.copy {
	    	    from buildFontUnzipDir.absolutePath+"/font-awesome-4.3.0"
		    into sourceFontDestDir.absolutePath
	    }
		    
	    project.delete(buildFontUnzipDir)
        }
    }
}

project.task("cleanFont") << {
    println 'Cleaning up font directories ...'
    println 'font-awesome dir: ' + sourceFontDestDir.absolutePath
    sourceFontDestDir.deleteDir()
}

clean.dependsOn cleanJet,cleanFont

war.archiveName "omc-ui-framework-web.war"

copyJsSource.dependsOn unpackJETFromArtifactory, unpackJSLibFromArtifactory, unpackFontFromArtifactory

//copy files without minify when -PdevMode enabled
task copyDevJs(type:Copy, dependsOn: [cleanJs, unpackJETFromArtifactory, unpackJSLibFromArtifactory, unpackFontFromArtifactory,compileSass]){
    from(webRootSourceDir) {
	include "**/*"
    }
    into stagingDir
    
    doLast {
        delete 'public_html/@version@/css'
    }  
}

if(project.hasProperty("devMode")){
	war.dependsOn copyDevJs
}
else
{
	war.dependsOn individualMinify

}

war {
    if(project.hasProperty("devMode")){
	from(stagingDir) {
	    include '**/*'
	    exclude '**/*.orig.js','**/*.map'
	    into('/')
	}

	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}
    }
    else
    {
	from(stagingDir) {
	    include '**/*'
	    exclude '**/*.orig.js','**/*.map','**/scss'
	    into('/')
	}

	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}
    }

	//rootSpec.exclude("**/*.zip")
}

//task buildDFCommonLibZip(type: Zip){
//	baseName = 'emcs-ui-framework'
//	appendix = 'common'
//	from stagingDir+'/emcsDependencies/uifwk/'
//	into 'uifwk'
//}

check.dependsOn integTestJar

publishing.publications {
    integTest(MavenPublication) {
	setArtifactId(project.name + '-' + integTestJar.appendix)
	setGroupId('com.oracle.emaas.emcpdf.test')
        artifact integTestJar.archivePath
    }
}

artifactoryPublish {
	publications ('integTest')
}
