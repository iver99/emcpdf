apply plugin: 'ear'
apply plugin: 'eclipse-wtp'

configurations { 
    appServer     
}

version = project.ext.getServiceVersion("OMC-UI-Framework")

def artifactId = 'omc-ui-framework' 
def groupId = group 
def versionNumber = version

ext.appName_commonui="${artifactPrefix}omc-ui-framework"

ear 
{
	libDirName 'lib'
	appDirName 'EarContent'
	baseName = artifactPrefix+'omc-ui-framework'
	from('ear/META-INF')
	{ 
		include 'ear/META-INF/*.xml'
		into('META-INF') 
	}
}

dependencies 
{
	deploy (project(path:':omc-ui-framework:omc-ui-framework-web', configuration:'archives')) {transitive = false}
	
	earlib (project(':omc-ui-framework:omc-ui-framework-webutils')){transitive = false} 

    
    earlib getProjectArtifact('log4j-core')   
	earlib getProjectArtifact('log4j-api')	
	earlib getProjectArtifact('jackson-core')   
	earlib getProjectArtifact('jackson-databind')   
	earlib getProjectArtifact('jackson-annotations')   
  
    earlib	getProjectArtifact('zookeeper') 
    earlib	getProjectArtifact('registry-client') 
    earlib getProjectArtifact('registry-lookup-client')  
	earlib getProjectArtifact('emaas-platform-tenant-sdk')
	earlib (project(':dashboards-sdk')){transitive = false}


	earlib getProjectArtifact('log4j-slf4j-impl')   
	earlib getProjectArtifact('httpclient')   
	earlib getProjectArtifact('httpcore')   

	earlib getProjectArtifact('commons-logging')   
        earlib  getProjectArtifact('zookeeper')   
        earlib getProjectArtifact('commons-lang3')   
}

// All WLS Related things

loadConfiguration()

def loadConfiguration() {

    def environment = hasProperty('env') ? env : 'dev'
    setProperty 'environment', environment
    
    def configFile = file("${rootDir}/appServerConfig.config")
    def appServerconfig = new ConfigSlurper(environment).parse(configFile.toURL())
    setProperty 'appServerconfig', appServerconfig
}

task appServerInit << {

	println "=============== Environment is $environment ========================"
	println " "
	println "(Un/Re)Deployment will be performed at following server info: "
	println "	serverName:  $appServerconfig.serverName"
	println "	port:  $appServerconfig.port"
    println "	adminuser:  $appServerconfig.adminUser"
	println "	adminuserpwd: $appServerconfig.adminUserPwd"
	println " "

	dependencies 
	{
        	appServer compile(group: 'com.oracle.weblogic', name: 'wlfullclient', version: '12.1.2-0-0')
	} 
        if (!project.hasProperty('appServerTargetName')) {
                            project.ext.appServerTargetName = "Server-6";           // default to 'Server-6' if not specified on command line
                        }

	if (!project.hasProperty('serverHost')) { 
		project.ext.serverHost = "$appServerconfig.serverName"; 
	} 
	if (!project.hasProperty('adminServerPost')) { 
		project.ext.adminServerPost = "$appServerconfig.port"; 
	}     
	if (!project.hasProperty('adminUser')) { 
		project.ext.adminUser = "$appServerconfig.adminUser"; 
	}     
	if (!project.hasProperty('adminUserPassword')) { 
		project.ext.adminUserPassword = "$appServerconfig.adminUserPwd"; 
	}     

	project.ext.t3URL = "t3://${serverHost}:${adminServerPost}" 
	
	ant.propertyfile(file: "../testenv.properties") 
	{
		entry( key:"hostname",  value: "${serverHost}" )
		entry( key: "port", value: "${appServerconfig.port}")
	}

	ant.taskdef(name: 'wldeploy',classname: 'weblogic.ant.taskdefs.management.WLDeploy',classpath: configurations.appServer.asPath)  
} 

task appServerDeploy{
	dependsOn 'ear', 'appServerInit'

	doLast 
	{ 
		println "Deploying ${ear.archivePath} to ${t3URL}" 

		ant.wldeploy(action:'deploy',  
		source:     ear.archivePath, 
		targets:   appServerTargetName,
		name:       "OMC-UI-Framework-6",
		adminurl:   t3URL,  
		user:       adminUser, 
		password:   adminUserPassword, 
		upload:     'true',  
		verbose:    'true', 
		debug:      'false') 
	} 
}


task appServerUndeploy{
	dependsOn 'appServerInit' 

	doLast 
	{ 
		println "Undeploying ${appName_commonui}-${version} from ${t3URL}" 

		ant.wldeploy(action:'undeploy',  
		name:       "OMC-UI-Framework-6",  
		adminurl:   t3URL,  
		user:       adminUser, 
		password:   adminUserPassword, 
		verbose:    'false', 
		debug:      'true')
	}
}

task appServerRedeploy{
	dependsOn 'appServerInit' 
	doFirst {
		tasks.appServerUndeploy.execute()
	}
	doLast {
		tasks.appServerDeploy.execute()
	}
}

