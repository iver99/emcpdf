import java.nio.file.*
import java.security.MessageDigest
import java.util.regex.Pattern
import org.apache.tools.ant.filters.ReplaceTokens

apply from:'test.gradle'

def jsversion = project.ext.getServiceVersion('OMC-UI-Framework')
def versionPathElement = jsversion + "-"+ rootProject.ext.get("appTimeStamp")

jar {
        from('src/main/java') {
            if (!project.hasProperty("devMode")) {
	         filesMatching("**/*.properties") {
                     filter(ReplaceTokens, tokens: [version: versionPathElement])
                }	
            }
                include '**/*.xml'
                include '**/*.properties'
        }
}


publishing.publications {
    integTest(MavenPublication) {
                        setArtifactId(project.name + '-' + integTestJar.appendix)
                        setGroupId("${publishGroup}")
                        artifact integTestJar.archivePath
    }
    thisJarPublication(MavenPublication) {
                        from project.components.java
                        setGroupId("${publishGroup}")
    }
}

artifactoryPublish {
        publications('integTest')
        publications('thisJarPublication')
}
 
dependencies {
        compile project(':dashboards-sdk')
        compile getProjectArtifact('log4j-core')   
        compile getProjectArtifact('log4j-api')   
        compile getProjectArtifact('wls-api')   
	    compile getProjectArtifact('registry-lookup-client')   
	    compile getProjectArtifact('registry-client')   
	    compile getProjectArtifact('emaas-platform-tenant-sdk')   
   		compile getProjectArtifact('wlfullclient')   
        
        compile getProjectArtifact('jackson-core-asl')   
        compile getProjectArtifact('jackson-mapper-asl')   
        compile getProjectArtifact('jackson-xc')   
        compile getProjectArtifact('jmockit')
        compile getProjectArtifact('jettison')  
        compile getProjectArtifact('jersey-core')  
      	compile getProjectArtifact('jersey-client') 
} 
test {
        classpath = sourceSets.test.compileClasspath + sourceSets.test.output
        useTestNG()
        {
                //We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
                //if you wish to run ALL tests within this projet - remove following.
                includeGroups 's1' ,'s2'
        }
}

eclipse {
    classpath {
        plusConfigurations += configurations.testNG //avoid building error in Eclipse
    }
}
