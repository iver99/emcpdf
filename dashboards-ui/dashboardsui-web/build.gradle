apply plugin: 'war'
apply plugin: 'maven-publish'
apply plugin: 'artifactory-publish'

// source 'webapp' directory
def File sourceWebappDir = new File(project.projectDir, 'public_html')
// source directories where jet files are copied
def File sourceJetDestDir = new File(sourceWebappDir, 'emcsDependencies/oraclejet')

project.task("unpackJETFromArtifactory") << {
    // if the resources/web/js/libs directory is empty - either the first time this task is
    // run or the directory has been cleaned, then
    // iterate over the project artifacts and look for the oraclejet.zip,
    // - downloaded on the local file system (generally found in <user_home_dir>/.gradle)
    // - unzip to the build/jet directory
    // - copy over the directories to different common/resources directories
    // (these directories are specified in the .gitignore file)
    // - delete the build/jet directory
    // build directory where the oraclejet.zip will be unzipped
    
    def File buildJetUnzipDir = new File(buildDir.absolutePath, 'jet')
    //first time or if custom cleans removes it
    sourceJetDestDir.mkdirs()

    //project.configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.name.equals('oraclejet') && files(sourceJetDestDir.listFiles()).isEmpty()) {
            logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
            buildJetUnzipDir.mkdirs()
            project.copy {
                from project.zipTree(artifact.file.absolutePath)
                into buildJetUnzipDir.absolutePath
            }
            // Copy each of the unzipped jet directories to
            // the appropriate source directories
            // 1. build/jet/ >> public_html/emcsDependencies/oraclejet/
            project.copy {
                from  buildJetUnzipDir
                into sourceJetDestDir.absolutePath
            }
            
            //finally delete the build/jet directory
            project.delete(buildJetUnzipDir)
        }
    }
}

project.task("cleanJet") << {
    println 'Cleaning up jet directories ...'
    println 'oraclejet dir: ' + sourceJetDestDir.absolutePath
    sourceJetDestDir.deleteDir()
}

def war_number = "${download_number}"
def download_group = "${download_group}".split(",")
def download_artifacts = "${download_artifacts}".split(",")
def download_version = "${download_version}".split(",")
def download_foldername = "${download_foldername}".split(",")

project.task("unpackZipFromArtifactory") << {
    
    for (i in 0..<war_number.toInteger()){
	    configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		if (artifact.name.contains(download_artifacts[i])) {
		    logger.lifecycle("Unpacking artifact ${artifact.name}, version:${artifact.moduleVersion.id.version}..")
		    def File buildWarUnzipDir = new File(buildDir.absolutePath, "intgwar"+i)
		    buildWarUnzipDir.mkdirs()
		    project.copy {
		        from project.file(artifact.file.absolutePath)
		        into buildWarUnzipDir.absolutePath
		    }
		    ant.unzip(src: buildWarUnzipDir.absolutePath+"/"+download_artifacts[i]+"-"+download_version[i]+".zip", dest:buildWarUnzipDir.absolutePath)
		    
		    project.copy {
		        //from  buildWarUnzipDir.absolutePath+"/emcsDependencies/"
			from buildWarUnzipDir.absolutePath
			exclude "*.zip"
		        into sourceWebappDir.absolutePath+"/emcsDependencies/"
		    }
		    
		    project.delete(buildWarUnzipDir)
		}
	    }
    }
}

project.task("cleanZip") << {
    def File warDestDir = new File(sourceWebappDir.absolutePath,"/emcsDependencies")
    def File tmpdir = warDestDir
    println 'Cleaning up war directories ...'

    download_foldername.each { folder ->
        tmpdir = new File(warDestDir.absolutePath,"/"+folder)
	println 'war dir: ' + tmpdir
	tmpdir.deleteDir()
	}
}

clean.dependsOn cleanJet,cleanZip

war.archiveName "dashboardsui-web.war"

if(war_number.toInteger()>0){

	war.dependsOn unpackJETFromArtifactory, unpackZipFromArtifactory
}
else
{
	war.dependsOn unpackJETFromArtifactory
}

war {
	from('public_html') {
	       include '**/*'
	        into('/')
	}
	//from('src/main/java') {
	//        include '**/*'
	//        into('WEB-INF/classes')
	//}

	from('src/main/java') { 
		include '**/*.properties'
		into('WEB-INF/classes') 
	}

	rootSpec.exclude("**/*.zip")
}

task buildDFCommonLibZip(type: Zip){
	baseName = 'emcs-ui-framework'
	appendix = 'common'
	//classifier = 'common'
	from 'public_html/emcsDependencies/dfcommon/'
	into 'dfcommon'
}

//def libsToPublish = []
//fileTree publishfiles = fileTree("build/libs") + fileTree("build/distributions")
//fileTree publishfiles = fileTree("build/distributions")
//publishfiles.each { file ->
//    libsToPublish << file
//}

publishing {
//    publications {
//	for (f in libsToPublish ) {
//	    def fbase = f.getName().split("\\.")[0]
//	    "$fbase"(MavenPublication) {
//		version "${publish_version}"
//	        groupId "${publish_group}"
//		artifact f
//		artifactId fbase
//	    }
//	}
//    }

    publications {
	maven(MavenPublication) {
	    version "${publish_version}"
	    groupId "${publish_group}"
	    artifact(buildDFCommonLibZip)
	    artifactId 'emcs-ui-framework-common'
	}
    }
    repositories {
        maven {
            url "${artifactory_contextUrl}"+'/'+"${publish_repo_key}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
}

task runQAUITestSuite(type: Test){
        useTestNG(){
        dependsOn ':dashboards-ui:dashboardsui-ee:ear'
        useDefaultListeners = true
        outputDirectory = file("$buildDir/testngoutput")
        suites file('testngsuite.xml')
        }
}

// Directory where the restful API doc is generated
ext.restDocRootDir = "${buildDir}/restdoc" 
ext.restDocOutputDir = "${restDocRootDir}"

configurations {
	restDoc
	enunciateCore
	ftpAntTask
}

/**
 * Generates documentation for the REST service API
 */  
task restDoc {
 
    // Configure task input and output to not generate the doc again when the 
    // source file have not changed
    inputs.files 'src/main/java/oracle/sysman/emaas/platform/dashboards/ui/web/rest'
    outputs.dir restDocOutputDir
}
restDoc << {
    
    // Declare the enunciate ant task
    ant.taskdef (name: 'enunciate', 
        classname: 'org.codehaus.enunciate.main.EnunciateTask',
        classpath: configurations.enunciateCore.asPath)
    
    // Make the directory to store enunciate output
    ant.mkdir(dir: "${restDocOutputDir}")

    // Define classpath for running enunciate
    ant.path(id:'enunciateRuntimePath') {
        pathelement(path: configurations.restDoc.asPath)
    }  

    // Run the enunciate task
    ant.enunciate(basedir: 'src/main/java/oracle/sysman/emaas/platform/dashboards/ui/web/rest/',
            classpathRef: 'enunciateRuntimePath',
            verbose: 'true', 
            debug: 'true', 
            configFile: 'enunciate.xml',
            javacSourceVersion: '7') {
        
        include(name: '**/*.java')
	exclude(name: '*/exception')
        export(artifactId: 'docs', destination: restDocOutputDir)
        javacArgument(argument: '-g')
    }	
}

/**
 * FTP the REST API document to the ftp server
 */

task ftpRestDoc << {
		ant {
			taskdef(name: 'ftp',
                classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
                classpath: configurations.ftpAntTask.asPath)
			ftp(server: ftpserver, userid: uidoc_username, password: uidoc_password, remotedir: remote_restdoc_dir) {
				fileset(dir: "${restDocOutputDir}")
			}
		}
	}

sourceSets {
                            test{
                                java {
                                          srcDirs = ['src/test/java']
                                }
                                resources.srcDirs = ['src/test/java']
                            }
 }

dependencies {
        providedCompile project(':dashboards-ui:dashboardsui-webutils')
        compile(group: 'org.apache.logging.log4j', name:'log4j-core', version:'2.0.2')
        compile(group: 'org.apache.logging.log4j', name:'log4j-api', version:'2.0.2')
        compile(group: 'emaas.platform', name: 'registry-lookup-client', version: '0.23.6')
        compile(group: 'emaas.platform', name: 'registry-client', version: '0.23.6')

	providedCompile(group: 'org.testng', name:'testng', version:'6.8.8')
	providedCompile(group: 'org.codehaus.groovy', name:'groovy-all', version:'2.2.1')
	
	providedCompile(group: 'com.jayway.restassured', name:'json-path', version:'1.8.1')
	providedCompile(group: 'com.jayway.restassured', name:'xml-path', version:'1.9.0')
	providedCompile(group: 'com.jayway.restassured', name:'rest-assured-common', version:'2.3.1')
	providedCompile(group: 'com.jayway.restassured', name:'rest-assured', version:'2.3.1')
        providedCompile(group: 'javax.servlet', name:'servlet-api', version:'2.5')
        providedCompile(group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0')
        compile(group: 'oraclejet', name: 'oraclejet', version: '1.1.0-293', ext: 'zip')
	if(war_number.toInteger()>0){
	    for (i in 0..<war_number.toInteger())
		compile (group: download_group[i], name: download_artifacts[i], version: download_version[i], ext: 'zip', changing: true)
	}

	enunciateCore 'org.codehaus.enunciate:enunciate-core:1.28'
	restDoc(
		[group: 'org.codehaus.enunciate', name: 'enunciate-core-rt', version: '1.28'],
		[group: 'org.codehaus.enunciate', name: 'enunciate-core', version: '1.28'],
		[group: 'org.codehaus.enunciate', name: 'enunciate-docs', version: '1.28'],
		[group: 'org.codehaus.enunciate', name: 'enunciate-core-annotations', version: '1.28'],
		[group: 'com.oracle.weblogic', name: 'jersey-core-1.17.1', version: '12.1.2-0-0'],
		[group: 'com.sun.jersey', name: 'jersey-server', version: '1.17'],
		[group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17']		
	)
	ftpAntTask('org.apache.ant:ant-commons-net:1.8.4') {
			module('commons-net:commons-net:1.4.1') {
				dependencies 'oro:oro:2.0.8:jar'
			}
		}
}

