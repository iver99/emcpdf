import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import java.util.Date
apply from:'test.gradle'
apply plugin: 'java'
version = "1.0.0" + "-$buildTimestamp"
dfversion = project.ext.getServiceVersion('DashboardService-API')
def versionPathElement = dfversion + "-"+ new SimpleDateFormat("yyMMdd.HHmmss").format(new Date())

task extractCacheJar(type: Jar){
	appendix = 'cacheJar'
	 from sourceSets.main.output
	include('com/oracle/platform/emaas/**/*.class')
	include('cache_config.properties')

}
publishing.publications {
    integTest(MavenPublication) {
                        setArtifactId(project.name + '-' + integTestJar.appendix)
                        setGroupId("${publishGroup}")
                        artifact integTestJar.archivePath
    }
    thisJarPublication(MavenPublication) {
                        from project.components.java
                        setGroupId("${publishGroup}")
    }
    extractCache(MavenPublication) {
                 setGroupId('com.oracle.emaas.emcpdf.sdk')
           		 setArtifactId (project.name)
           		 artifact extractCacheJar.archivePath
    }
}

sourceSets {	
	main {	
		java {	
			srcDir 'src/main/java'	
		}	
		resources {	
			srcDirs = ['src/main/java', 'src/main/resources']
		}
	}
 }

artifactoryPublish {
	 publications('integTest')
	 publications('thisJarPublication')
	 publications('extractCache')
}

dependencies {
    compile getProjectArtifact('log4j-core')
    compile getProjectArtifact('log4j-api')
    compile getProjectArtifact('jackson-core-asl')
    compile getProjectArtifact('servlet-api')
    compile getProjectArtifact('commons-lang3')
    testCompile getProjectArtifact('jmockit')
}
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDirs = ['src/main/java', 'src/main/resources']
        }
    }
}
artifactoryPublish {
    publications('integTest')
    publications('thisJarPublication')

}

test {
    classpath = sourceSets.test.compileClasspath + sourceSets.test.output
    useTestNG()
            {
                //We explicity include only tests annotate as s1 or s2 - they are "short-running" tests,
                //if you wish to run ALL tests within this projet - remove following.
                includeGroups 's1' ,'s2'
            }
}
processResources {
    from('src/main/resources') {
        include '*.properties', '*.xml'
        filter(ReplaceTokens, tokens: [version : versionPathElement])
    }
}

clean{
    delete 'build'
}

eclipse {
    classpath {
        plusConfigurations += configurations.testNG //avoid building error in Eclipse
    }
}
build.dependsOn extractCacheJar
